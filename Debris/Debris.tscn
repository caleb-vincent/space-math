[gd_scene load_steps=8 format=2]

[ext_resource path="res://assets/turret.svg" type="Texture" id=1]
[ext_resource path="res://assets/station.svg" type="Texture" id=2]
[ext_resource path="res://assets/black.png" type="Texture" id=3]
[ext_resource path="res://Debris/DebrisHud.tscn" type="PackedScene" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends SubGame


const DebrisPiece = preload(\"DebrisPiece.tscn\")
const DebrisOptions = preload(\"DebrisOptions.gd\")

export var fireSpeed = 2000

var debrisOptions : DebrisOptions = null


var OPENING_MSG = tr(\"DEBRIS_OPENING\")

var _payload : DebrisPiece = null
var _options : Array = [INF]
var _started = false


################################################################################
#	Inherited Methods
################################################################################


func _process(_delta) -> void:
	if !_started:
		return
	if Input.is_action_just_released(\"ui_accept\") || Input.is_action_just_released(\"game_click\"):
		_fire()
	if $FireTimer.wait_time - $FireTimer.time_left > 0.25:
		# TODO: This math is wrong.
		var target = get_viewport().get_mouse_position() - $FirePosition.position
		var angle = $FirePosition.position.angle_to_point(target)
		$SpaceStation/Sprite.rotation = angle * PI


func _ready() -> void:
	_rng.randomize()

	if Options.selectedDifficulty == Options.Difficulty.EASY:
		$FireTimer.wait_time *= 0.75
	elif Options.selectedDifficulty == Options.Difficulty.HARD:
		$FireTimer.wait_time *= 1.25

	if Options.selectedDifficulty == Options.Difficulty.EASY:
		$SpawnTimer.wait_time *= 1.25
	elif Options.selectedDifficulty == Options.Difficulty.HARD:
		$SpawnTimer.wait_time *= .075

	$FireTimer.start()
	$Hud.msgText = OPENING_MSG


################################################################################
#	Private Methods
################################################################################


func _addDebris() -> void:

	var debris = DebrisPiece.instance()
	add_child_below_node($DebrisStart, debris)
	debris.position = $DebrisStart.position
	debris.value = _rng.randi_range(debrisOptions.minAnswer, debrisOptions.maxAnswer)

	debris.connect(\"offScreen\", self, \"_debrisLeft\")
	debris.connect(\"impact\", self, \"_onImpact\")
	debris.connect(\"updated\", self, \"_debrisUpdated\")
	debris.connect(\"canceled\", self, \"_debrisCancled\")

	var symbol = DebrisPiece.instance()
	add_child_below_node($DebrisStart, symbol)
	symbol.symbol = \"=\"
	symbol.position = debris.position + Vector2(48, 0)
	debris.connectTo(symbol)

	var piece2 = DebrisPiece.instance()
	add_child_below_node($DebrisStart, piece2)
	piece2.position = symbol.position + Vector2(48, 0)
	piece2.value = _rng.randi_range(debrisOptions.minAnswer, debrisOptions.maxAnswer)
	while piece2.value == debris.value:
		piece2.value = _rng.randi_range(debrisOptions.minAnswer, debrisOptions.maxAnswer)
	symbol.connectTo(piece2)
	pass


func _fire() -> void:
	if $FireTimer.time_left <= 0 && _payload != null:
		var target = get_viewport().get_mouse_position() - $FirePosition.position
		_payload.linear_velocity = target.normalized() *  fireSpeed
		$FireTimer.start()
		_payload = null


func _reload() -> void:
	_payload = DebrisPiece.instance()
	var option = _options[_rng.randi_range(0, _options.size() - 1)]
	if option == INF:
		_payload.value = _rng.randi_range(debrisOptions.minAnswer, debrisOptions.maxAnswer)
		while _payload.value == 0:
			_payload.value = _rng.randi_range(debrisOptions.minAnswer, debrisOptions.maxAnswer)
	else:
		_payload.value = option
	_payload.collision_layer = 0x8
	add_child_below_node($FirePosition, _payload)
	_payload.position = $FirePosition.position
	_payload.isProjectile = true


################################################################################
#	Signal Handling
################################################################################


func _debrisCancled(oldDifference : int) -> void:
	if oldDifference != INF:
		_options.remove(_options.find(oldDifference))
		$Hud.score += 1


func _debrisLeft(node : PhysicsBody2D) -> void:
	node.teleportChain(Vector2($DebrisStart.position.x, node.position.y))


func _debrisUpdated(difference : int, oldDifference : int) -> void:
	if oldDifference != INF:
		_options.remove(_options.find(oldDifference))
	if difference < debrisOptions.maxAnswer && difference > debrisOptions.minAnswer:
		_options.append(difference)


func _onImpact( node : PhysicsBody2D ) -> void:
	node.clearChain(false)
	if $Hud.lives > 0:
		$Hud.lives -= 1
	else:
		$Hud.msgText = GAME_OVER
		$FireTimer.stop()
		if _payload != null:
			_payload.queue_free()
			_payload = null


func _on_DebrisHud_gameOver() -> void:
	emit_signal(\"gameOver\")


func _on_DebrisHud_msgGone() -> void:
	if $Hud.lives <= 0:
		emit_signal(\"gameOver\")
	elif !_started:
		_addDebris()
		_started = true

func _on_SpawnTimer_timeout() -> void:
	_addDebris()


func _on_FireTimer_timeout() -> void:
	_reload()

"

[sub_resource type="ConvexPolygonShape2D" id=2]
points = PoolVector2Array( -640, 0, 640, 0, 0, -32 )

[sub_resource type="CircleShape2D" id=3]
radius = 68.0755

[node name="Debris" type="Node"]
script = SubResource( 1 )
fireSpeed = 1000

[node name="TextureRect" type="TextureRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 3 )
expand = true
stretch_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="FireTimer" type="Timer" parent="."]
one_shot = true

[node name="SpawnTimer" type="Timer" parent="."]
wait_time = 20.0
autostart = true

[node name="SpaceStation" type="StaticBody2D" parent="."]
position = Vector2( 640, 720 )
collision_layer = 2
collision_mask = 4

[node name="Sprite2" type="Sprite" parent="SpaceStation"]
position = Vector2( 8, 0.999939 )
scale = Vector2( 1.5, 1 )
texture = ExtResource( 2 )

[node name="Sprite" type="Sprite" parent="SpaceStation"]
position = Vector2( 0, -30 )
scale = Vector2( 0.75, 0.75 )
texture = ExtResource( 1 )

[node name="StationShape" type="CollisionShape2D" parent="SpaceStation"]
shape = SubResource( 2 )

[node name="TurretShape" type="CollisionShape2D" parent="SpaceStation"]
position = Vector2( 0, -30 )
shape = SubResource( 3 )

[node name="DebrisStart" type="Position2D" parent="."]
position = Vector2( 1376, 56 )

[node name="FirePosition" type="Position2D" parent="."]
position = Vector2( 640, 690 )
__meta__ = {
"_edit_lock_": true
}

[node name="Hud" parent="." instance=ExtResource( 4 )]
lives = 5
[connection signal="timeout" from="FireTimer" to="." method="_on_FireTimer_timeout"]
[connection signal="timeout" from="SpawnTimer" to="." method="_on_SpawnTimer_timeout"]
[connection signal="gameOver" from="Hud" to="." method="_on_DebrisHud_gameOver"]
[connection signal="msgGone" from="Hud" to="." method="_on_DebrisHud_msgGone"]
