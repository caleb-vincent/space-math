image: barichello/godot-ci:3.4.2


variables:
  PROJECT_NAME: SpaceMath


stages:
  - export
  - package


before_script:
      # Need curl for the Gitlab API
   - apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/*
      # The Version is just the tag, or the commits-from-tag, or a default
   - VERSION=$(git describe --tags 2>/dev/null || echo 000.000.000)
      # Pull the numbers from the version, and make a build number from it, e.g. 1.2.3 -> 1002003
   - BUILD_FUNC=$(echo $VERSION | sed -z "s#\([[:digit:]]\+\)\.\([[:digit:]]\+\)\.\([[:digit:]]\+\).*#\(\1*1000000\)+\(\2*1000\)+\3#" || 0)
   - BUILD_NUMBER=$((BUILD_FUNC))
      # Package naming will include version 
   - PACKAGE_NAME=${PROJECT_NAME}_$VERSION
   - cd godot_project
      # Replace some variables in the export presets and translations file
   - sed "s/%%version%%/${VERSION}/g" export_presets_ci.cfg > export_presets.cfg
   - sed -i "s/%%build_number%%/${BUILD_NUMBER}/g" export_presets.cfg
   - sed -i "s/%%year%%/$(date +%Y)/g" export_presets.cfg
   - sed -i "s/%%version%%/${VERSION}/g" assets/translation.csv 
   - echo CI for $PACKAGE_NAME $BUILD_NUMBER


after_script:
      # revert changes to the translations
   - git checkout -- godot_project/assets/translation.csv


linux:
  stage: export
  script:
    - mkdir -v -p ../build/linux
    - godot -v --export "Linux/X11" ../build/linux/$PROJECT_NAME.x86_64
  artifacts:
    name: $PROJECT_NAME-$CI_JOB_NAME
    paths:
      - build/linux


windows:
  stage: export
  script:
    - mkdir -v -p ../build/windows
    - godot -v --export "Windows Desktop" ../build/windows/$PROJECT_NAME.exe
  artifacts:
    name: $PROJECT_NAME-$CI_JOB_NAME
    paths:
      - build/windows


web:
  stage: export
  script:
    - mkdir -v -p ../build/web
    - godot -v --export "HTML5" ../build/web/index.html
  artifacts:
    name: $PROJECT_NAME-$CI_JOB_NAME
    paths:
      - build/web


android-unsigned:
  stage: export
  script:
    - mkdir -v -p ../build/android
    - godot -v --export "Android Unsigned" ../build/android/$PROJECT_NAME-unsigned.apk
  artifacts:
    name: $EXPORT_NAME-$CI_JOB_NAME
    paths:
      - build/android


# Android Release Job. You will need to include keystore and password in the GitLab variable settings:
# 1. Take your generated keystore and convert it to Base64:
#   Linux & macOS: `base64 release.keystore -w 0`
#   Windows: `certutil -encodehex -f release.keystore encoded.txt 0x40000001`
# 2. Go to GitLab Project > Settings > CI/CD > Variables and copy the Base64-encoded keystore value in a new variable `SECRET_RELEASE_KEYSTORE_BASE64` as type variable.
# 3. Create a second variable SECRET_RELEASE_KEYSTORE_USER as type variable with the alias of your keystore as value.
# 4. Create a third variable SECRET_RELEASE_KEYSTORE_PASSWORD as type variable with the password of your keystore as value.

android:
  stage: export
  rules:
    - if: $SECRET_RELEASE_KEYSTORE_BASE64
    - if: $SECRET_RELEASE_KEYSTORE_USER
    - if: $SECRET_RELEASE_KEYSTORE_PASSWORD
  script:
    - echo $SECRET_RELEASE_KEYSTORE_BASE64 | base64 --decode > /root/release.keystore
    - mkdir -v -p ../build/android
    - sed 's@keystore/release=".*"@keystore/release="'/root/release.keystore'"@g' -i export_presets.cfg
    - sed 's@keystore/release_user=".*"@keystore/release_user="'$SECRET_RELEASE_KEYSTORE_USER'"@g' -i export_presets.cfg
    - sed 's@keystore/release_password=".*"@keystore/release_password="'$SECRET_RELEASE_KEYSTORE_PASSWORD'"@g' -i export_presets.cfg
    - godot -v --export "Android" ../build/android/$PROJECT_NAME.apk
  artifacts:
    name: $PROJECT_NAME-$CI_JOB_NAME
    paths:
      - build/android


linux_package:
  stage: package
  only:
    - tags
  except:
    - branches
  dependencies:
    - linux
  script:
    - |
      cd ../build/linux
      echo Deploy "${PACKAGE_NAME}-linux"
      zip -9r "${PACKAGE_NAME}-linux.zip" .
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${PACKAGE_NAME}-linux.zip ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PROJECT_NAME}/${VERSION}/${PACKAGE_NAME}-linux.zip


android_package:
  stage: package
  only:
    - tags
  except:
    - branches
  dependencies:
    - android
  script:
    - |
      cd ../build/android
      echo Deploy "${PACKAGE_NAME}-android"
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PROJECT_NAME.apk ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PROJECT_NAME}/${VERSION}/${PACKAGE_NAME}.apk


android-unsigned_package:
  stage: package
  only:
    - tags
  except:
    - branches
  dependencies:
    - android-unsigned
  script:
    - |
      cd ../build/android
      echo Deploy "${PACKAGE_NAME}-android-unsigned"
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $PROJECT_NAME-unsigned.apk ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PROJECT_NAME}/${VERSION}/${PACKAGE_NAME}-unsigned.apk


windows_package:
  stage: package
  only:
    - tags
  except:
    - branches
  dependencies:
    - windows
  script:
    - |
      cd ../build/windows
      echo Deploy "${PACKAGE_NAME}-windows"
      zip -9r "${PACKAGE_NAME}-windows.zip" .
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${PACKAGE_NAME}-windows.zip ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PROJECT_NAME}/${VERSION}/${PACKAGE_NAME}-windows.zip


pages:
  stage: package
  dependencies:
    - web
  only:
    - tags
  except:
    - branches
  script:
    - mkdir ../public || echo public directory exists
    - mv ../build/web/** ../public
  artifacts:
    paths:
      - public

